You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.
JavaScript	
__________________________________________________________

/**
 * @param {number[]} digits
 * @return {number[]}
 */
var plusOne = function(digits) {
    // go from the end of arr
    // take last element = current of arr
    // if current number is < 9
    // add 1 to current number and exit the loop
    // else if current number is = 9
    // rassigne current number with 0
    // you'll go in to second loop if current number is < 9
    // once you finished with all numbers in arr and still didn't meet number is < 9 you need to add 1 to the beginning of arr
    // return arr
    for(let i = digits.length-1; i >= 0; i--) {
        if(digits[i] < 9){
                 digits[i] += 1;
                break
        }
        else {
            digits[i] = 0;
            if (i == 0) {digits.unshift(1)}            
        }              
    }
     return digits;
};
