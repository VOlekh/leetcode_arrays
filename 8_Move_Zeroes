Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 
 A two-pointer approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array.
 ________________________________________________________
/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */

var moveZeroes = function(nums) {
    let j = 0;
    let nIterations = nums.length
        for (let i = 0; i < nIterations; i++) {
            if (nums[i] !== 0){
                nums[j] = nums[i];
                j++;
            }
        }
    let numberOfZeros = nIterations - j;
    console.log(numberOfZeros);
    for (let i = nIterations - numberOfZeros; i < nIterations; i++ ){
        nums[i] = 0
    }    
};
